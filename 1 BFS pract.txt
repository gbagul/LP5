#include<iostream>
#include<vector>
#include<queue>
#include<omp.h>
using namespace std;

struct Node
{
  int data;
  vector<Node*> children;
};
void bfs(Node* root)
{
  if(!root)
  {
    return ;
  }
  queue <Node*> q;
  q.push(root);
  while(!q.empty())
  {
    vector <Node*> cl;
    vector <Node*> nl;
    for(int i = 0; i < q.size();i++)
    {
      cl.push_back(q.front());
      q.pop();
    }
    #pragma omp parellel for
    {
      for(int i = 0; i<cl.size();i++)
      {
        Node* current = cl[i];
        #pragma omp critical
        {
          cout<<current->data<<" ";
        }
        #pragma omp critical
        {
          for(int j=0;j<current->children.size();j++)
          {
            nl.push_back(current->children[j]);
          }
        }
      }
    }
    for(int i = 0; i<nl.size();i++)
    {
      q.push(nl[i]);
    }
  }
}
int main()
{
 Node* root = new Node();
  root->data=1;
  Node* child1 = new Node();
  child1->data=2;
  Node* child2 = new Node();
  child2->data=3;
  Node* grandchild = new Node();
  grandchild->data=4;
  child2->children.push_back(grandchild);
  root->children.push_back(child2);
  root->children.push_back(child1);

  bfs(root);
  return 0;
}